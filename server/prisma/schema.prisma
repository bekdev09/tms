generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum TaskStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  BLOCKED
  COMPLETED
  VERIFIED // Manager/Admin reviewed and accepted completion
  REJECTED // Manager/Admin rejected completion; sent back
  CANCELED // Task canceled before completion
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model User {
  id         String        @id @default(cuid())
  username   String        @unique
  firstname  String
  lastname   String
  patronymic String?
  email      String        @unique
  phone      String        @unique
  password   String
  role       Role          @default(EMPLOYEE)
  status     UserStatus    @default(ACTIVE)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  tasks      Task[]        @relation("TaskAssignee")
  histories  TaskHistory[] @relation("taskHistory_actor")
  // notifications Notification[]

  historiesAsFrom TaskHistory[]  @relation("fromUserHistory")
  historiesAsTo   TaskHistory[]  @relation("toUserHistory")
  refreshTokens   RefreshToken[]
}

model RefreshToken {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  tokenHash      String // hashed opaque token
  revoked        Boolean  @default(false)
  replacedBy     String? // for rotation
  createdAt      DateTime @default(now())
  expiresAt      DateTime
  absoluteExpiry DateTime
  ip             String?
  userAgent      String?
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String
  assigneeId  String
  assignee    User       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  priority    Priority   @default(MEDIUM)
  status      TaskStatus @default(IN_PROGRESS)
  deadline    DateTime?
  closedAt    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  histories TaskHistory[]
}

enum TaskActionType {
  CREATED
  UPDATED
  REASSIGNED
  STATUS_CHANGED
  COMMENTED
  DEADLINE_CHANGED
  DELETED
}

model TaskHistory {
  id         String         @id @default(cuid())
  taskId     String
  task       Task           @relation(fields: [taskId], references: [id])
  action     TaskActionType
  metadata   Json?
  actorId    String
  actor      User           @relation("taskHistory_actor", fields: [actorId], references: [id])
  fromUserId String?
  fromUser   User?          @relation("fromUserHistory", fields: [fromUserId], references: [id])
  toUserId   String
  toUser     User?          @relation("toUserHistory", fields: [toUserId], references: [id])
  createdAt  DateTime       @default(now())
}

enum NotificationChannel {
  EMAIL
  SMS
  TELEGRAM
}

model Notification {
  id        String              @id @default(cuid())
  userId    String
  channel   NotificationChannel
  title     String
  message   String
  // read      Boolean             @default(false)
  createdAt DateTime            @default(now())
}
